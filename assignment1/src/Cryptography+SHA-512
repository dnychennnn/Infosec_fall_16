# -*- coding: utf-8 -*-
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend

#file i/o
message = open("512M+7",'r+b')
result = open("512M+7_result", 'wb')

finished = False
block_size = 1024
n = 0
while not finished:
	chunk = message.read(block_size) #每次讀160個B
	digest = hashes.Hash(hashes.SHA512(), backend=default_backend())
	''' PKCS padding '''
	print n
	if len(chunk) == 0 or len(chunk) % block_size != 0:
		padding_length = block_size - (len(chunk) % block_size)
		chunk += padding_length * chr(padding_length)
		finished = True
	digest.update(chunk)
	result.write(digest.finalize()) #Continue hashing of a message by consuming the next chunk of data.	
	# print hash.hexdigest() #print出16進位的加密資料
	n += 1
message.close()
result.close()
